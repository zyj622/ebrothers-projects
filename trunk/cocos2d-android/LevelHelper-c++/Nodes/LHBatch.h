//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#ifndef __LH_BATCH_NODE__
#define __LH_BATCH_NODE__

#include "cocos2d.h"

using namespace cocos2d;

class LHBatch : public CCObject
{
private:
    std::string uniqueName;
    int z;
    CCSpriteBatchNode* batchNode; //week ptr
    
    static int numberOfBatch;

public:
    
    int getZ(void){return z;}
    void setZ(const int& newZ){ z = newZ;}
    
    void setUniqueName(const std::string& name){uniqueName = name;}
    std::string& getUniqueName(void){return uniqueName;}

    void setSpriteBatchNode(CCSpriteBatchNode* node){batchNode = node;}
    CCSpriteBatchNode* getSpriteBatchNode(void){return batchNode;}

    //CONSTRUCTORS
    virtual bool init(void);
    virtual ~LHBatch(void);
	LHBatch(void);    
    
    bool initWithUniqueName(const std::string& name);
    static LHBatch* batchWithUniqueName(const std::string& name);


};
////////////////////////////////////////////////////////////////////////////////
#endif

//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __LHSPRITE_NODE
#define __LHSPRITE_NODE

#include "cocos2d.h"
#include "Box2D.h"

using namespace cocos2d;

class LHPathNode;
class LHAnimationNode;
class LHParallaxNode;
class LHSprite : public CCSprite
{
private:
	b2Body* body; //week ptr
    std::string uniqueName;
    std::map<std::string, void*> customUserValues;
    
    int currentFrame;
    LHAnimationNode* animation;
    LHPathNode* pathNode;
    
    LHParallaxNode* parallaxNode;
    
    CCSize realScale; //used for the joints in case you create a level with SD graphics using ipad template
    
    LHParallaxNode* parallaxFollowingThisSprite;
    
    friend class LHParallaxNode;
public:

    CCSize getRealScale(){return realScale;}
    void setRealScale(CCSize scale){realScale = scale;}
    
    //INFO
    void setUniqueName(const char* name);
    const std::string& getUniqueName(void);
    
    void setBody(b2Body* body);
    b2Body* getBody(void);
    bool removeBodyFromWorld(void);
    
    //ANIMATION
    void setAnimation(LHAnimationNode* anim);
    LHAnimationNode* getAnimation(void);
    std::string getAnimationName(void);
    int getNumberOfFrames(void);    
    void setFrame(int frmNo);
    int  getCurrentFrame(void);
    
    void stopAnimation(void);
    
    //PARALLAX
    LHParallaxNode* getParallaxNode(void){return parallaxNode;}
    void setParallaxNode(LHParallaxNode*node){parallaxNode = node;}
    
    //PATH
    void setPathNode(LHPathNode* node);
    LHPathNode* getPathNode(void);
    void cancelPathMovement(void);//will remove the path node if any - sprite will no longer move on a path
    void pausePathMovement(const bool& pauseStatus);
    void registerNotifierOnPathEndPoints(SelectorProtocol* obj, 
                                         SEL_CallFuncN sel);

    
    //USER INFO
    void setCustomValue(void* value, const char* key);
    void* getCustomValueWithKey(const char* key);
    
    //TRANSFORMATIONS
    //The following method will transform the physic body also - if any
    void transformPosition(CCPoint pos);    
    void transformRotation(float rot);
    

public:
    //CONSTRUCTORS
    virtual bool init(void);
    virtual ~LHSprite(void);
	LHSprite();    
    
    static int numberOfSprites;
    
    static LHSprite* sprite(void);
    static LHSprite* spriteWithTexture(CCTexture2D *pTexture);
	static LHSprite* spriteWithTexture(CCTexture2D *pTexture, const CCRect& rect);
    static LHSprite* spriteWithTexture(CCTexture2D *pTexture, const CCRect& rect, const CCPoint& offset);
	static LHSprite* spriteWithSpriteFrame(CCSpriteFrame *pSpriteFrame);
	static LHSprite* spriteWithSpriteFrameName(const char *pszSpriteFrameName);
    static LHSprite* spriteWithFile(const char *pszFileName);
	static LHSprite* spriteWithFile(const char *pszFileName, const CCRect& rect);
    static LHSprite* spriteWithBatchNode(CCSpriteBatchNode *batchNode, const CCRect& rect);

private:
	
};
////////////////////////////////////////////////////////////////////////////////

#endif

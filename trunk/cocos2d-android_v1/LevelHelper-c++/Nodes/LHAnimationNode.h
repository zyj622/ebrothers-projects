//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __LHANIMATION_NODE__
#define __LHANIMATION_NODE__

#include "cocos2d.h"
#include "Box2D.h"

using namespace cocos2d;

class LHSprite;
class LHAnimationNode : public CCObject
{
private:
    
    std::string uniqueName;
    std::string imageName;
    
    CCMutableArray<CCSpriteFrame*> frames;
    std::vector<CCRect> framesInfo;
    

    CCSpriteBatchNode* batchNode; //week ptr
    
    static int numberOfAnimNodes;
    
public:
    bool loop;
    float speed;
    int repetitions;
    bool startAtLaunch;    
  
    virtual bool init(void);
    virtual ~LHAnimationNode(void);
	LHAnimationNode(void);    

    bool initWithUniqueName(const char* name);
    static LHAnimationNode* animationNodeWithUniqueName(const char* name);    
    
    void setImageName(const char* img);
    std::string& getImageName(void);
    
    void setUniqueName(const char* name);
    const std::string& getUniqueName(void);
    
    //void setFrames( CCMutableArray<CCSpriteFrame*> * frames);
    
    void setFramesInfo(const std::vector<CCRect>& frmInfo);

    void computeFrames(void);//needs a valid batchNode and framesInfo
    
    CCMutableArray<CCSpriteFrame*>* getFrames(void);
    void setBatchNode(CCSpriteBatchNode* node);

    //call setBatchNode then cumputeFrames first
    void runAnimationOnSprite(LHSprite* node,
                              SelectorProtocol* animNotifierId,
                              SEL_CallFuncND animNotifierSel,
                              const bool& notifOnLoop);
    
    int getNumberOfFrames(void);

    void setAnimationTexturePropertiesOnSprite(LHSprite* ccsprite);
    void setFrame(int frameNo, LHSprite* spr);
};
////////////////////////////////////////////////////////////////////////////////

#endif

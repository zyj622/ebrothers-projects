//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __LH_BEZIER_NODE__
#define __LH_BEZIER_NODE__

#include "cocos2d.h"
#include "Box2D.h"
#include "LHDictionary.h"

using namespace cocos2d;

class LHSprite;
class LHPathNode;

class LHBezierNode : public CCNode
{
private:
    
	bool isClosed;
	bool isTile;
	bool isVisible;
	bool isLine;
	bool isPath;
    std::string uniqueName;
	b2Body* body; //can be 0
    std::vector<CCPoint> pathPoints;
    //CCMutableArray<LHPathNode*> pathNodes;
	
	/////////for the tile feature
	CCTexture2D *texture;
	CCRect color;
	CCRect lineColor;
	float lineWidth;
	CCSize winSize;
    std::vector<std::vector<CCPoint> > trianglesHolder;
    std::vector<CCPoint> linesHolder;
	CCSize imageSize;
    
    static int numberOfBezierNodes;
public:
    
    bool getIsClosed(void){return isClosed;}
 
    bool getIsTile(void){return isTile;}
  
    bool getIsVisible(void){return isVisible;}
    void setIsVisible(const bool& v){isVisible = v;}
    
    bool getIsLine(void){return isLine;}

    std::string& getUniqueName(void){return uniqueName;}
  
    b2Body* getBody(void){return body;};
    
    virtual void init(void);
    virtual ~LHBezierNode(void);
    LHBezierNode(void);
    
    bool initWithDictionary(LHDictionary* properties, 
                            CCLayer* ccLayer, 
                            b2World* world);
    static LHBezierNode* nodeWithDictionary(LHDictionary* properties, 
                                            CCLayer* ccLayer, 
                                            b2World* world);
    
    LHPathNode* addSpriteOnPath(LHSprite* spr, 
                                float   pathSpeed, 
                                bool    startAtEndPoint,
                                bool    isCyclic,
                                bool    restartOtherEnd,
                                int     axis,
                                bool    flipx,
                                bool    flipy,
                                bool    deltaMove);
    
    virtual void draw(void);
    
private:
    
    static CCPoint pointOnCurve(CCPoint p1, CCPoint p2, CCPoint p3, CCPoint p4, float t);
    
    void initTileVerticesFromDictionary(LHDictionary* bezierDict);
    void initPathPointsFromDictionary(LHDictionary* bezierDict);
    void createBodyFromDictionary(LHDictionary* bezierDict, b2World* world);
    
};

#endif

//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
#include "LHBatch.h"
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
int LHBatch::numberOfBatch = 0;
bool LHBatch::init(void){

    batchNode = 0;
    z = 0;

    return true;
}

LHBatch::~LHBatch(void){

    CCLog("LHBATCH destructor %d", --numberOfBatch);
    if(0 != batchNode)
    {
        batchNode->removeFromParentAndCleanup(true);
    }
}
LHBatch::LHBatch(void){
    ++numberOfBatch;
}

bool LHBatch::initWithUniqueName(const std::string& name){
    
    uniqueName = name;
    return init();
}

LHBatch* LHBatch::batchWithUniqueName(const std::string& name){
    
    LHBatch *pobBatch = new LHBatch();
	if (pobBatch && pobBatch->initWithUniqueName(name))
    {
	    pobBatch->autorelease();
        return pobBatch;
    }
    CC_SAFE_DELETE(pobBatch);
	return NULL;
}

////////////////////////////////////////////////////////////////////////////////
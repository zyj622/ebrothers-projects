//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.h
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef __LH_CONTACT_NODE__
#define __LH_CONTACT_NODE__

#include "cocos2d.h"
#include "Box2D.h"
#include "LHContactListener.h"
#include "LHContactInfo.h"

using namespace cocos2d;

class LHContactNodeInfo;

//typedef std::map<int, LHContactNodeInfo*> collisionMap;
//typedef std::map<int, LHContactNodeInfo*>::iterator mapIt;
//typedef std::map<int, collisionMap>::iterator collisionMapIt;

class LHContactNode : public CCNode
{
private:
        //std::map<int, collisionMap > preCollisionMap;
        //std::map<int, collisionMap > postCollisionMap;
        CCMutableDictionary<int> preCollisionMap;
        CCMutableDictionary<int> postCollisionMap;
    
        LHContactListener *lhContactListener;
    
public:
    
    LHContactNode();
    virtual ~LHContactNode();
    
    bool initContactNodeWithWorld(b2World* world);
    static LHContactNode* contactNodeWithWorld(b2World* world);
        
    void registerPreColisionCallbackBetweenTagA(int tagA, 
                                                int tagB,
                                                SelectorProtocol* obj, 
                                                SEL_CallFuncO sel);
    
    void cancelPreColisionCallbackBetweenTagA(int tagA,
                                              int tagB);
    
    void registerPostColisionCallbackBetweenTagA(int tagA,
                                                 int tagB,
                                                 SelectorProtocol* obj, 
                                                 SEL_CallFuncO sel);
    
    void cancelPostColisionCallbackBetweenTagA(int tagA,
                                               int tagB);
    
    void preSolve(b2Contact* contact,                     
                  const b2Manifold* oldManifold);
    
    void postSolve(b2Contact* contact,
                   const b2ContactImpulse* impulse);

};



#endif	
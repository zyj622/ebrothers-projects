//  This file was generated by LevelHelper
//  http://www.levelhelper.org
//
//  LevelHelperLoader.mm
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////

#include "LHAnimationsExt.h"
#include "LHAnimationNode.h"
#include "LHBatch.h"


void LHAnimationsExt::startAnimationWithUniqueNameOnSpriteWithName(const std::string& animName, 
                                                                   const std::string& sprName,
                                                                   LevelHelperLoader* loader){
    LHSprite* spr = loader->spriteWithUniqueName(sprName);
    loader->startAnimationWithUniqueName(animName, spr);
}

void LHAnimationsExt::stopAnimationOnSpriteWithUniqueName(const std::string& sprName, 
                                                          LevelHelperLoader* loader){
    
    LHSprite* ccsprite = loader->spriteWithUniqueName(sprName);	
    ccsprite->stopAnimation();
}


void LHAnimationsExt::nextFrameForSprite(LHSprite* ccsprite, bool repeat)
{
    if(ccsprite == NULL)
        return;
    
    int curFrame = ccsprite->getCurrentFrame();
    curFrame +=1;
    
    if(repeat && curFrame >= ccsprite->getNumberOfFrames())
    {
        curFrame = 0;
    }
    
    if(curFrame >= 0 && curFrame < ccsprite->getNumberOfFrames())
    {
        ccsprite->setFrame(curFrame);
    }    
}
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
void LHAnimationsExt::prevFrameForSprite(LHSprite* spr, bool repeat){
    
    if(spr == NULL)
        return;
    
    int curFrame = spr->getCurrentFrame();
    curFrame -=1;
    
    if(repeat && curFrame < 0)
    {
        curFrame = spr->getNumberOfFrames() - 1;        
    }
    
    if(curFrame >= 0 && curFrame < (int)spr->getNumberOfFrames())
    {
        spr->setFrame(curFrame);
    }        
}
bool LHAnimationsExt::isSpriteAtLastFrame(LHSprite* sprite){
    if(NULL == sprite)
        return false;
    return (sprite->getNumberOfFrames()-1 == sprite->getCurrentFrame());
}

////////////////////////////////////////////////////////////////////////////////